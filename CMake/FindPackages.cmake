# generated by Buildyard, do not edit.

include(System)
list(APPEND FIND_PACKAGES_DEFINES ${SYSTEM})
# Copyright (c) 2014 Stefan.Eilemann@epfl.ch

# Provides common_package(Name args) which improves find_package.
# First invokes find_package with all the given arguments, and then
# falls back to using pkg_config if available. The pkg_config path
# does only implement the version, REQUIRED and QUIET find_package
# arguments (e.g. no COMPONENTS)

find_package(PkgConfig)
set(ENV{PKG_CONFIG_PATH}
  "${CMAKE_INSTALL_PREFIX}/lib/pkgconfig:$ENV{PKG_CONFIG_PATH}")

macro(COMMON_PACKAGE Name)
  string(TOUPPER ${Name} COMMON_PACKAGE_NAME)
  set(COMMON_PACKAGE_ARGS ${ARGN}) # ARGN is not a list. make one.
  set(COMMON_PACKAGE_VERSION)

  if(COMMON_PACKAGE_ARGS)
    list(GET COMMON_PACKAGE_ARGS 0 COMMON_PACKAGE_VERSION)
    if(COMMON_PACKAGE_VERSION MATCHES "^[0-9.]+$") # is a version
      set(COMMON_PACKAGE_VERSION ">=${COMMON_PACKAGE_VERSION}")
    else()
      set(COMMON_PACKAGE_VERSION)
    endif()
  endif()

  list(FIND COMMON_PACKAGE_ARGS "QUIET" COMMON_PACKAGE_QUIET_POS)
  if(COMMON_PACKAGE_QUIET_POS EQUAL -1)
    set(COMMON_PACKAGE_QUIET)
  else()
    set(COMMON_PACKAGE_QUIET "QUIET")
  endif()

  list(FIND COMMON_PACKAGE_ARGS "REQUIRED" COMMON_PACKAGE_REQUIRED_POS)
  if(COMMON_PACKAGE_REQUIRED_POS EQUAL -1) # Optional find
    find_package(${Name} ${COMMON_PACKAGE_ARGS}) # try standard cmake way
    if((NOT ${Name}_FOUND) AND (NOT ${COMMON_PACKAGE_NAME}_FOUND) AND PKG_CONFIG_EXECUTABLE)
      pkg_check_modules(${Name} ${Name}${COMMON_PACKAGE_VERSION}
        ${COMMON_PACKAGE_QUIET}) # try pkg_config way
    endif()
  else() # required find
    list(REMOVE_AT COMMON_PACKAGE_ARGS ${COMMON_PACKAGE_REQUIRED_POS})
    find_package(${Name} ${COMMON_PACKAGE_ARGS}) # try standard cmake way
    if((NOT ${Name}_FOUND) AND (NOT ${COMMON_PACKAGE_NAME}_FOUND) AND PKG_CONFIG_EXECUTABLE)
      pkg_check_modules(${Name} REQUIRED ${Name}${COMMON_PACKAGE_VERSION}
        ${COMMON_PACKAGE_QUIET}) # try pkg_config way (and fail if needed)
    endif()
  endif()
endmacro()

common_package(Boost 1.41.0  REQUIRED COMPONENTS program_options date_time serialization unit_test_framework regex system thread)
common_package(Deflect 0.4  REQUIRED )
common_package(FCGI   REQUIRED )
common_package(FFMPEG   REQUIRED )
common_package(MPI   REQUIRED )
common_package(OpenGL   REQUIRED )
common_package(Qt5Concurrent   REQUIRED )
common_package(Qt5Core   REQUIRED )
common_package(Qt5Declarative   REQUIRED )
common_package(Qt5Network   REQUIRED )
common_package(Qt5OpenGL   REQUIRED )
common_package(Qt5Svg   REQUIRED )
common_package(Qt5WebKitWidgets   REQUIRED )
common_package(Qt5Widgets   REQUIRED )
common_package(Qt5Xml   REQUIRED )
common_package(Qt5XmlPatterns   REQUIRED )
common_package(Poppler 0.24   COMPONENTS Qt5)
common_package(TUIO 1.4   )
common_package(OpenMP    )

if(EXISTS ${PROJECT_SOURCE_DIR}/CMake/FindPackagesPost.cmake)
  include(${PROJECT_SOURCE_DIR}/CMake/FindPackagesPost.cmake)
endif()

if(BOOST_FOUND)
  set(Boost_name BOOST)
  set(Boost_FOUND TRUE)
elseif(Boost_FOUND)
  set(Boost_name Boost)
  set(BOOST_FOUND TRUE)
endif()
if(Boost_name)
  list(APPEND FIND_PACKAGES_DEFINES DISPLAYCLUSTER_USE_BOOST)
  if(NOT COMMON_LIBRARY_TYPE MATCHES "SHARED")
    list(APPEND DISPLAYCLUSTER_DEPENDENT_LIBRARIES Boost)
  endif()
  set(FIND_PACKAGES_FOUND "${FIND_PACKAGES_FOUND} Boost")
  link_directories(${${Boost_name}_LIBRARY_DIRS})
  if(NOT "${${Boost_name}_INCLUDE_DIRS}" MATCHES "-NOTFOUND")
    include_directories(SYSTEM ${${Boost_name}_INCLUDE_DIRS})
  endif()
  if(NOT "${${Boost_name}_INCLUDE_DIR}" MATCHES "-NOTFOUND")
    include_directories(SYSTEM ${${Boost_name}_INCLUDE_DIR})
  endif()
endif()

if(DEFLECT_FOUND)
  set(Deflect_name DEFLECT)
  set(Deflect_FOUND TRUE)
elseif(Deflect_FOUND)
  set(Deflect_name Deflect)
  set(DEFLECT_FOUND TRUE)
endif()
if(Deflect_name)
  list(APPEND FIND_PACKAGES_DEFINES DISPLAYCLUSTER_USE_DEFLECT)
  if(NOT COMMON_LIBRARY_TYPE MATCHES "SHARED")
    list(APPEND DISPLAYCLUSTER_DEPENDENT_LIBRARIES Deflect)
  endif()
  set(FIND_PACKAGES_FOUND "${FIND_PACKAGES_FOUND} Deflect")
  link_directories(${${Deflect_name}_LIBRARY_DIRS})
  if(NOT "${${Deflect_name}_INCLUDE_DIRS}" MATCHES "-NOTFOUND")
    include_directories(${${Deflect_name}_INCLUDE_DIRS})
  endif()
  if(NOT "${${Deflect_name}_INCLUDE_DIR}" MATCHES "-NOTFOUND")
    include_directories(${${Deflect_name}_INCLUDE_DIR})
  endif()
endif()

if(FCGI_FOUND)
  set(FCGI_name FCGI)
  set(FCGI_FOUND TRUE)
elseif(FCGI_FOUND)
  set(FCGI_name FCGI)
  set(FCGI_FOUND TRUE)
endif()
if(FCGI_name)
  list(APPEND FIND_PACKAGES_DEFINES DISPLAYCLUSTER_USE_FCGI)
  if(NOT COMMON_LIBRARY_TYPE MATCHES "SHARED")
    list(APPEND DISPLAYCLUSTER_DEPENDENT_LIBRARIES FCGI)
  endif()
  set(FIND_PACKAGES_FOUND "${FIND_PACKAGES_FOUND} FCGI")
  link_directories(${${FCGI_name}_LIBRARY_DIRS})
  if(NOT "${${FCGI_name}_INCLUDE_DIRS}" MATCHES "-NOTFOUND")
    include_directories(${${FCGI_name}_INCLUDE_DIRS})
  endif()
  if(NOT "${${FCGI_name}_INCLUDE_DIR}" MATCHES "-NOTFOUND")
    include_directories(${${FCGI_name}_INCLUDE_DIR})
  endif()
endif()

if(FFMPEG_FOUND)
  set(FFMPEG_name FFMPEG)
  set(FFMPEG_FOUND TRUE)
elseif(FFMPEG_FOUND)
  set(FFMPEG_name FFMPEG)
  set(FFMPEG_FOUND TRUE)
endif()
if(FFMPEG_name)
  list(APPEND FIND_PACKAGES_DEFINES DISPLAYCLUSTER_USE_FFMPEG)
  if(NOT COMMON_LIBRARY_TYPE MATCHES "SHARED")
    list(APPEND DISPLAYCLUSTER_DEPENDENT_LIBRARIES FFMPEG)
  endif()
  set(FIND_PACKAGES_FOUND "${FIND_PACKAGES_FOUND} FFMPEG")
  link_directories(${${FFMPEG_name}_LIBRARY_DIRS})
  if(NOT "${${FFMPEG_name}_INCLUDE_DIRS}" MATCHES "-NOTFOUND")
    include_directories(${${FFMPEG_name}_INCLUDE_DIRS})
  endif()
  if(NOT "${${FFMPEG_name}_INCLUDE_DIR}" MATCHES "-NOTFOUND")
    include_directories(${${FFMPEG_name}_INCLUDE_DIR})
  endif()
endif()

if(MPI_FOUND)
  set(MPI_name MPI)
  set(MPI_FOUND TRUE)
elseif(MPI_FOUND)
  set(MPI_name MPI)
  set(MPI_FOUND TRUE)
endif()
if(MPI_name)
  list(APPEND FIND_PACKAGES_DEFINES DISPLAYCLUSTER_USE_MPI)
  if(NOT COMMON_LIBRARY_TYPE MATCHES "SHARED")
    list(APPEND DISPLAYCLUSTER_DEPENDENT_LIBRARIES MPI)
  endif()
  set(FIND_PACKAGES_FOUND "${FIND_PACKAGES_FOUND} MPI")
  link_directories(${${MPI_name}_LIBRARY_DIRS})
  if(NOT "${${MPI_name}_INCLUDE_DIRS}" MATCHES "-NOTFOUND")
    include_directories(SYSTEM ${MPI_C_INCLUDE_PATH} ${${MPI_name}_INCLUDE_DIRS})
  endif()
  if(NOT "${${MPI_name}_INCLUDE_DIR}" MATCHES "-NOTFOUND")
    include_directories(SYSTEM ${MPI_C_INCLUDE_PATH} ${${MPI_name}_INCLUDE_DIR})
  endif()
endif()

if(OPENGL_FOUND)
  set(OpenGL_name OPENGL)
  set(OpenGL_FOUND TRUE)
elseif(OpenGL_FOUND)
  set(OpenGL_name OpenGL)
  set(OPENGL_FOUND TRUE)
endif()
if(OpenGL_name)
  list(APPEND FIND_PACKAGES_DEFINES DISPLAYCLUSTER_USE_OPENGL)
  if(NOT COMMON_LIBRARY_TYPE MATCHES "SHARED")
    list(APPEND DISPLAYCLUSTER_DEPENDENT_LIBRARIES OpenGL)
  endif()
  set(FIND_PACKAGES_FOUND "${FIND_PACKAGES_FOUND} OpenGL")
  link_directories(${${OpenGL_name}_LIBRARY_DIRS})
  if(NOT "${${OpenGL_name}_INCLUDE_DIRS}" MATCHES "-NOTFOUND")
    include_directories(${${OpenGL_name}_INCLUDE_DIRS})
  endif()
  if(NOT "${${OpenGL_name}_INCLUDE_DIR}" MATCHES "-NOTFOUND")
    include_directories(${${OpenGL_name}_INCLUDE_DIR})
  endif()
endif()

if(QT5CONCURRENT_FOUND)
  set(Qt5Concurrent_name QT5CONCURRENT)
  set(Qt5Concurrent_FOUND TRUE)
elseif(Qt5Concurrent_FOUND)
  set(Qt5Concurrent_name Qt5Concurrent)
  set(QT5CONCURRENT_FOUND TRUE)
endif()
if(Qt5Concurrent_name)
  list(APPEND FIND_PACKAGES_DEFINES DISPLAYCLUSTER_USE_QT5CONCURRENT)
  if(NOT COMMON_LIBRARY_TYPE MATCHES "SHARED")
    list(APPEND DISPLAYCLUSTER_DEPENDENT_LIBRARIES Qt5Concurrent)
  endif()
  set(FIND_PACKAGES_FOUND "${FIND_PACKAGES_FOUND} Qt5Concurrent")
  link_directories(${${Qt5Concurrent_name}_LIBRARY_DIRS})
  if(NOT "${${Qt5Concurrent_name}_INCLUDE_DIRS}" MATCHES "-NOTFOUND")
    include_directories(BEFORE SYSTEM ${${Qt5Concurrent_name}_INCLUDE_DIRS})
  endif()
  if(NOT "${${Qt5Concurrent_name}_INCLUDE_DIR}" MATCHES "-NOTFOUND")
    include_directories(BEFORE SYSTEM ${${Qt5Concurrent_name}_INCLUDE_DIR})
  endif()
endif()

if(QT5CORE_FOUND)
  set(Qt5Core_name QT5CORE)
  set(Qt5Core_FOUND TRUE)
elseif(Qt5Core_FOUND)
  set(Qt5Core_name Qt5Core)
  set(QT5CORE_FOUND TRUE)
endif()
if(Qt5Core_name)
  list(APPEND FIND_PACKAGES_DEFINES DISPLAYCLUSTER_USE_QT5CORE)
  if(NOT COMMON_LIBRARY_TYPE MATCHES "SHARED")
    list(APPEND DISPLAYCLUSTER_DEPENDENT_LIBRARIES Qt5Core)
  endif()
  set(FIND_PACKAGES_FOUND "${FIND_PACKAGES_FOUND} Qt5Core")
  link_directories(${${Qt5Core_name}_LIBRARY_DIRS})
  if(NOT "${${Qt5Core_name}_INCLUDE_DIRS}" MATCHES "-NOTFOUND")
    include_directories(${${Qt5Core_name}_INCLUDE_DIRS})
  endif()
  if(NOT "${${Qt5Core_name}_INCLUDE_DIR}" MATCHES "-NOTFOUND")
    include_directories(${${Qt5Core_name}_INCLUDE_DIR})
  endif()
endif()

if(QT5DECLARATIVE_FOUND)
  set(Qt5Declarative_name QT5DECLARATIVE)
  set(Qt5Declarative_FOUND TRUE)
elseif(Qt5Declarative_FOUND)
  set(Qt5Declarative_name Qt5Declarative)
  set(QT5DECLARATIVE_FOUND TRUE)
endif()
if(Qt5Declarative_name)
  list(APPEND FIND_PACKAGES_DEFINES DISPLAYCLUSTER_USE_QT5DECLARATIVE)
  if(NOT COMMON_LIBRARY_TYPE MATCHES "SHARED")
    list(APPEND DISPLAYCLUSTER_DEPENDENT_LIBRARIES Qt5Declarative)
  endif()
  set(FIND_PACKAGES_FOUND "${FIND_PACKAGES_FOUND} Qt5Declarative")
  link_directories(${${Qt5Declarative_name}_LIBRARY_DIRS})
  if(NOT "${${Qt5Declarative_name}_INCLUDE_DIRS}" MATCHES "-NOTFOUND")
    include_directories(${${Qt5Declarative_name}_INCLUDE_DIRS})
  endif()
  if(NOT "${${Qt5Declarative_name}_INCLUDE_DIR}" MATCHES "-NOTFOUND")
    include_directories(${${Qt5Declarative_name}_INCLUDE_DIR})
  endif()
endif()

if(QT5NETWORK_FOUND)
  set(Qt5Network_name QT5NETWORK)
  set(Qt5Network_FOUND TRUE)
elseif(Qt5Network_FOUND)
  set(Qt5Network_name Qt5Network)
  set(QT5NETWORK_FOUND TRUE)
endif()
if(Qt5Network_name)
  list(APPEND FIND_PACKAGES_DEFINES DISPLAYCLUSTER_USE_QT5NETWORK)
  if(NOT COMMON_LIBRARY_TYPE MATCHES "SHARED")
    list(APPEND DISPLAYCLUSTER_DEPENDENT_LIBRARIES Qt5Network)
  endif()
  set(FIND_PACKAGES_FOUND "${FIND_PACKAGES_FOUND} Qt5Network")
  link_directories(${${Qt5Network_name}_LIBRARY_DIRS})
  if(NOT "${${Qt5Network_name}_INCLUDE_DIRS}" MATCHES "-NOTFOUND")
    include_directories(${${Qt5Network_name}_INCLUDE_DIRS})
  endif()
  if(NOT "${${Qt5Network_name}_INCLUDE_DIR}" MATCHES "-NOTFOUND")
    include_directories(${${Qt5Network_name}_INCLUDE_DIR})
  endif()
endif()

if(QT5OPENGL_FOUND)
  set(Qt5OpenGL_name QT5OPENGL)
  set(Qt5OpenGL_FOUND TRUE)
elseif(Qt5OpenGL_FOUND)
  set(Qt5OpenGL_name Qt5OpenGL)
  set(QT5OPENGL_FOUND TRUE)
endif()
if(Qt5OpenGL_name)
  list(APPEND FIND_PACKAGES_DEFINES DISPLAYCLUSTER_USE_QT5OPENGL)
  if(NOT COMMON_LIBRARY_TYPE MATCHES "SHARED")
    list(APPEND DISPLAYCLUSTER_DEPENDENT_LIBRARIES Qt5OpenGL)
  endif()
  set(FIND_PACKAGES_FOUND "${FIND_PACKAGES_FOUND} Qt5OpenGL")
  link_directories(${${Qt5OpenGL_name}_LIBRARY_DIRS})
  if(NOT "${${Qt5OpenGL_name}_INCLUDE_DIRS}" MATCHES "-NOTFOUND")
    include_directories(${${Qt5OpenGL_name}_INCLUDE_DIRS})
  endif()
  if(NOT "${${Qt5OpenGL_name}_INCLUDE_DIR}" MATCHES "-NOTFOUND")
    include_directories(${${Qt5OpenGL_name}_INCLUDE_DIR})
  endif()
endif()

if(QT5SVG_FOUND)
  set(Qt5Svg_name QT5SVG)
  set(Qt5Svg_FOUND TRUE)
elseif(Qt5Svg_FOUND)
  set(Qt5Svg_name Qt5Svg)
  set(QT5SVG_FOUND TRUE)
endif()
if(Qt5Svg_name)
  list(APPEND FIND_PACKAGES_DEFINES DISPLAYCLUSTER_USE_QT5SVG)
  if(NOT COMMON_LIBRARY_TYPE MATCHES "SHARED")
    list(APPEND DISPLAYCLUSTER_DEPENDENT_LIBRARIES Qt5Svg)
  endif()
  set(FIND_PACKAGES_FOUND "${FIND_PACKAGES_FOUND} Qt5Svg")
  link_directories(${${Qt5Svg_name}_LIBRARY_DIRS})
  if(NOT "${${Qt5Svg_name}_INCLUDE_DIRS}" MATCHES "-NOTFOUND")
    include_directories(${${Qt5Svg_name}_INCLUDE_DIRS})
  endif()
  if(NOT "${${Qt5Svg_name}_INCLUDE_DIR}" MATCHES "-NOTFOUND")
    include_directories(${${Qt5Svg_name}_INCLUDE_DIR})
  endif()
endif()

if(QT5WEBKITWIDGETS_FOUND)
  set(Qt5WebKitWidgets_name QT5WEBKITWIDGETS)
  set(Qt5WebKitWidgets_FOUND TRUE)
elseif(Qt5WebKitWidgets_FOUND)
  set(Qt5WebKitWidgets_name Qt5WebKitWidgets)
  set(QT5WEBKITWIDGETS_FOUND TRUE)
endif()
if(Qt5WebKitWidgets_name)
  list(APPEND FIND_PACKAGES_DEFINES DISPLAYCLUSTER_USE_QT5WEBKITWIDGETS)
  if(NOT COMMON_LIBRARY_TYPE MATCHES "SHARED")
    list(APPEND DISPLAYCLUSTER_DEPENDENT_LIBRARIES Qt5WebKitWidgets)
  endif()
  set(FIND_PACKAGES_FOUND "${FIND_PACKAGES_FOUND} Qt5WebKitWidgets")
  link_directories(${${Qt5WebKitWidgets_name}_LIBRARY_DIRS})
  if(NOT "${${Qt5WebKitWidgets_name}_INCLUDE_DIRS}" MATCHES "-NOTFOUND")
    include_directories(${${Qt5WebKitWidgets_name}_INCLUDE_DIRS})
  endif()
  if(NOT "${${Qt5WebKitWidgets_name}_INCLUDE_DIR}" MATCHES "-NOTFOUND")
    include_directories(${${Qt5WebKitWidgets_name}_INCLUDE_DIR})
  endif()
endif()

if(QT5WIDGETS_FOUND)
  set(Qt5Widgets_name QT5WIDGETS)
  set(Qt5Widgets_FOUND TRUE)
elseif(Qt5Widgets_FOUND)
  set(Qt5Widgets_name Qt5Widgets)
  set(QT5WIDGETS_FOUND TRUE)
endif()
if(Qt5Widgets_name)
  list(APPEND FIND_PACKAGES_DEFINES DISPLAYCLUSTER_USE_QT5WIDGETS)
  if(NOT COMMON_LIBRARY_TYPE MATCHES "SHARED")
    list(APPEND DISPLAYCLUSTER_DEPENDENT_LIBRARIES Qt5Widgets)
  endif()
  set(FIND_PACKAGES_FOUND "${FIND_PACKAGES_FOUND} Qt5Widgets")
  link_directories(${${Qt5Widgets_name}_LIBRARY_DIRS})
  if(NOT "${${Qt5Widgets_name}_INCLUDE_DIRS}" MATCHES "-NOTFOUND")
    include_directories(${${Qt5Widgets_name}_INCLUDE_DIRS})
  endif()
  if(NOT "${${Qt5Widgets_name}_INCLUDE_DIR}" MATCHES "-NOTFOUND")
    include_directories(${${Qt5Widgets_name}_INCLUDE_DIR})
  endif()
endif()

if(QT5XML_FOUND)
  set(Qt5Xml_name QT5XML)
  set(Qt5Xml_FOUND TRUE)
elseif(Qt5Xml_FOUND)
  set(Qt5Xml_name Qt5Xml)
  set(QT5XML_FOUND TRUE)
endif()
if(Qt5Xml_name)
  list(APPEND FIND_PACKAGES_DEFINES DISPLAYCLUSTER_USE_QT5XML)
  if(NOT COMMON_LIBRARY_TYPE MATCHES "SHARED")
    list(APPEND DISPLAYCLUSTER_DEPENDENT_LIBRARIES Qt5Xml)
  endif()
  set(FIND_PACKAGES_FOUND "${FIND_PACKAGES_FOUND} Qt5Xml")
  link_directories(${${Qt5Xml_name}_LIBRARY_DIRS})
  if(NOT "${${Qt5Xml_name}_INCLUDE_DIRS}" MATCHES "-NOTFOUND")
    include_directories(${${Qt5Xml_name}_INCLUDE_DIRS})
  endif()
  if(NOT "${${Qt5Xml_name}_INCLUDE_DIR}" MATCHES "-NOTFOUND")
    include_directories(${${Qt5Xml_name}_INCLUDE_DIR})
  endif()
endif()

if(QT5XMLPATTERNS_FOUND)
  set(Qt5XmlPatterns_name QT5XMLPATTERNS)
  set(Qt5XmlPatterns_FOUND TRUE)
elseif(Qt5XmlPatterns_FOUND)
  set(Qt5XmlPatterns_name Qt5XmlPatterns)
  set(QT5XMLPATTERNS_FOUND TRUE)
endif()
if(Qt5XmlPatterns_name)
  list(APPEND FIND_PACKAGES_DEFINES DISPLAYCLUSTER_USE_QT5XMLPATTERNS)
  if(NOT COMMON_LIBRARY_TYPE MATCHES "SHARED")
    list(APPEND DISPLAYCLUSTER_DEPENDENT_LIBRARIES Qt5XmlPatterns)
  endif()
  set(FIND_PACKAGES_FOUND "${FIND_PACKAGES_FOUND} Qt5XmlPatterns")
  link_directories(${${Qt5XmlPatterns_name}_LIBRARY_DIRS})
  if(NOT "${${Qt5XmlPatterns_name}_INCLUDE_DIRS}" MATCHES "-NOTFOUND")
    include_directories(${${Qt5XmlPatterns_name}_INCLUDE_DIRS})
  endif()
  if(NOT "${${Qt5XmlPatterns_name}_INCLUDE_DIR}" MATCHES "-NOTFOUND")
    include_directories(${${Qt5XmlPatterns_name}_INCLUDE_DIR})
  endif()
endif()

if(POPPLER_FOUND)
  set(Poppler_name POPPLER)
  set(Poppler_FOUND TRUE)
elseif(Poppler_FOUND)
  set(Poppler_name Poppler)
  set(POPPLER_FOUND TRUE)
endif()
if(Poppler_name)
  list(APPEND FIND_PACKAGES_DEFINES DISPLAYCLUSTER_USE_POPPLER)
  if(NOT COMMON_LIBRARY_TYPE MATCHES "SHARED")
    list(APPEND DISPLAYCLUSTER_DEPENDENT_LIBRARIES Poppler)
  endif()
  set(FIND_PACKAGES_FOUND "${FIND_PACKAGES_FOUND} Poppler")
  link_directories(${${Poppler_name}_LIBRARY_DIRS})
  if(NOT "${${Poppler_name}_INCLUDE_DIRS}" MATCHES "-NOTFOUND")
    include_directories(SYSTEM ${${Poppler_name}_INCLUDE_DIRS})
  endif()
  if(NOT "${${Poppler_name}_INCLUDE_DIR}" MATCHES "-NOTFOUND")
    include_directories(SYSTEM ${${Poppler_name}_INCLUDE_DIR})
  endif()
endif()

if(TUIO_FOUND)
  set(TUIO_name TUIO)
  set(TUIO_FOUND TRUE)
elseif(TUIO_FOUND)
  set(TUIO_name TUIO)
  set(TUIO_FOUND TRUE)
endif()
if(TUIO_name)
  list(APPEND FIND_PACKAGES_DEFINES DISPLAYCLUSTER_USE_TUIO)
  if(NOT COMMON_LIBRARY_TYPE MATCHES "SHARED")
    list(APPEND DISPLAYCLUSTER_DEPENDENT_LIBRARIES TUIO)
  endif()
  set(FIND_PACKAGES_FOUND "${FIND_PACKAGES_FOUND} TUIO")
  link_directories(${${TUIO_name}_LIBRARY_DIRS})
  if(NOT "${${TUIO_name}_INCLUDE_DIRS}" MATCHES "-NOTFOUND")
    include_directories(SYSTEM ${${TUIO_name}_INCLUDE_DIRS})
  endif()
  if(NOT "${${TUIO_name}_INCLUDE_DIR}" MATCHES "-NOTFOUND")
    include_directories(SYSTEM ${${TUIO_name}_INCLUDE_DIR})
  endif()
endif()

if(OPENMP_FOUND)
  set(OpenMP_name OPENMP)
  set(OpenMP_FOUND TRUE)
elseif(OpenMP_FOUND)
  set(OpenMP_name OpenMP)
  set(OPENMP_FOUND TRUE)
endif()
if(OpenMP_name)
  list(APPEND FIND_PACKAGES_DEFINES DISPLAYCLUSTER_USE_OPENMP)
  if(NOT COMMON_LIBRARY_TYPE MATCHES "SHARED")
    list(APPEND DISPLAYCLUSTER_DEPENDENT_LIBRARIES OpenMP)
  endif()
  set(FIND_PACKAGES_FOUND "${FIND_PACKAGES_FOUND} OpenMP")
  link_directories(${${OpenMP_name}_LIBRARY_DIRS})
  if(NOT "${${OpenMP_name}_INCLUDE_DIRS}" MATCHES "-NOTFOUND")
    include_directories(${${OpenMP_name}_INCLUDE_DIRS})
  endif()
  if(NOT "${${OpenMP_name}_INCLUDE_DIR}" MATCHES "-NOTFOUND")
    include_directories(${${OpenMP_name}_INCLUDE_DIR})
  endif()
endif()

set(DISPLAYCLUSTER_BUILD_DEBS autoconf;automake;cmake;doxygen;freeglut3-dev;git;git-review;libavcodec-dev;libavformat-dev;libavutil-dev;libboost-date-time-dev;libboost-program-options-dev;libboost-regex-dev;libboost-serialization-dev;libboost-system-dev;libboost-test-dev;libboost-thread-dev;libfcgi-dev;libjpeg-turbo8-dev;libopenmpi-dev;libpoppler-qt5-dev;libswscale-dev;libturbojpeg;libxmu-dev;openmpi-bin;pkg-config;subversion)

set(DISPLAYCLUSTER_DEPENDS Boost;Deflect;FCGI;FFMPEG;MPI;OpenGL;Qt5Concurrent;Qt5Core;Qt5Declarative;Qt5Network;Qt5OpenGL;Qt5Svg;Qt5WebKitWidgets;Qt5Widgets;Qt5Xml;Qt5XmlPatterns;Poppler;TUIO;OpenMP)

# Write defines.h and options.cmake
if(NOT PROJECT_INCLUDE_NAME)
  message(WARNING "PROJECT_INCLUDE_NAME not set, old or missing Common.cmake?")
  set(PROJECT_INCLUDE_NAME ${PROJECT_NAME})
endif()
if(NOT OPTIONS_CMAKE)
  set(OPTIONS_CMAKE ${CMAKE_CURRENT_BINARY_DIR}/options.cmake)
endif()
set(DEFINES_FILE "${CMAKE_CURRENT_BINARY_DIR}/include/${PROJECT_INCLUDE_NAME}/defines${SYSTEM}.h")
list(APPEND COMMON_INCLUDES ${DEFINES_FILE})
set(DEFINES_FILE_IN ${DEFINES_FILE}.in)
file(WRITE ${DEFINES_FILE_IN}
  "// generated by CMake/FindPackages.cmake, do not edit.\n\n"
  "#ifndef ${PROJECT_NAME}_DEFINES_${SYSTEM}_H\n"
  "#define ${PROJECT_NAME}_DEFINES_${SYSTEM}_H\n\n")
file(WRITE ${OPTIONS_CMAKE} "# Optional modules enabled during build\n")
foreach(DEF ${FIND_PACKAGES_DEFINES})
  add_definitions(-D${DEF}=1)
  file(APPEND ${DEFINES_FILE_IN}
  "#ifndef ${DEF}\n"
  "#  define ${DEF} 1\n"
  "#endif\n")
if(NOT DEF STREQUAL SYSTEM)
  file(APPEND ${OPTIONS_CMAKE} "set(${DEF} ON)\n")
endif()
endforeach()
if(CMAKE_MODULE_INSTALL_PATH)
  install(FILES ${OPTIONS_CMAKE} DESTINATION ${CMAKE_MODULE_INSTALL_PATH}
    COMPONENT dev)
else()
  message(WARNING "CMAKE_MODULE_INSTALL_PATH not set, old or missing Common.cmake?")
endif()
file(APPEND ${DEFINES_FILE_IN}
  "\n#endif\n")

include(UpdateFile)
configure_file(${DEFINES_FILE_IN} ${DEFINES_FILE} COPYONLY)
if(Boost_FOUND) # another WAR for broken boost stuff...
  set(Boost_VERSION ${Boost_MAJOR_VERSION}.${Boost_MINOR_VERSION}.${Boost_SUBMINOR_VERSION})
endif()
if(CUDA_FOUND)
  string(REPLACE "-std=c++11" "" CUDA_HOST_FLAGS "${CUDA_HOST_FLAGS}")
  string(REPLACE "-std=c++0x" "" CUDA_HOST_FLAGS "${CUDA_HOST_FLAGS}")
endif()
if(OPENMP_FOUND)
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
endif()
if(QT4_FOUND)
  if(WIN32)
    set(QT_USE_QTMAIN TRUE)
  endif()
  # Configure a copy of the 'UseQt4.cmake' system file.
  if(NOT EXISTS ${QT_USE_FILE})
    message(WARNING "Can't find QT_USE_FILE!")
  else()
    set(_customUseQt4File "${CMAKE_CURRENT_BINARY_DIR}/UseQt4.cmake")
    file(READ ${QT_USE_FILE} content)
    # Change all include_directories() to use the SYSTEM option
    string(REPLACE "include_directories(" "include_directories(SYSTEM " content ${content})
    string(REPLACE "INCLUDE_DIRECTORIES(" "INCLUDE_DIRECTORIES(SYSTEM " content ${content})
    file(WRITE ${_customUseQt4File} ${content})
    set(QT_USE_FILE ${_customUseQt4File})
    include(${QT_USE_FILE})
  endif()
endif()
if(FIND_PACKAGES_FOUND)
  if(MSVC)
    message(STATUS "Configured ${PROJECT_NAME} with ${FIND_PACKAGES_FOUND}")
  else()
    message(STATUS "Configured ${PROJECT_NAME} with ${CMAKE_BUILD_TYPE}${FIND_PACKAGES_FOUND}")
  endif()
endif()
